package main

import (
	"context"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/widget"
	"github.com/rfxxfy/LintVision/logging"
	"github.com/rfxxfy/LintVision/parseurl"
	"github.com/rfxxfy/LintVision/stats"
)

type LintVisionGUI struct {
	app            fyne.App
	mainWindow     fyne.Window
	pathEntry      *widget.Entry
	urlEntry       *widget.Entry
	outputEntry    *widget.Entry
	logConfigEntry *widget.Entry
	progressBar    *widget.ProgressBar
	statusLabel    *widget.Label
	resultText     *widget.Entry
	isAnalyzing    bool
	cancelFunc     context.CancelFunc
}

func NewLintVisionGUI() *LintVisionGUI {
	gui := &LintVisionGUI{
		app: app.New(),
	}

	gui.mainWindow = gui.app.NewWindow("LintVision - –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞")
	gui.mainWindow.Resize(fyne.NewSize(800, 600))

	gui.setupUI()
	return gui
}

func (g *LintVisionGUI) setupUI() {
	g.pathEntry = widget.NewEntry()
	g.pathEntry.SetPlaceHolder("–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: . –∏–ª–∏ ~/projects)")
	g.pathEntry.SetText(".")

	g.urlEntry = widget.NewEntry()
	g.urlEntry.SetPlaceHolder("GitHub URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://github.com/user/repo)")

	g.outputEntry = widget.NewEntry()
	g.outputEntry.SetPlaceHolder("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

	g.logConfigEntry = widget.NewEntry()
	g.logConfigEntry.SetPlaceHolder("–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –ª–æ–≥–≥–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

	g.progressBar = widget.NewProgressBar()
	g.progressBar.Hide()

	g.statusLabel = widget.NewLabel("–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É")
	g.statusLabel.Alignment = fyne.TextAlignCenter

	g.resultText = widget.NewMultiLineEntry()
	g.resultText.SetPlaceHolder("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...")
	g.resultText.Disable()

	selectPathBtn := widget.NewButton("–í—ã–±—Ä–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é", g.selectDirectory)
	analyzeGitHubBtn := widget.NewButton("–ê–Ω–∞–ª–∏–∑ GitHub", g.runGitHubAnalysis)
	selectOutputBtn := widget.NewButton("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –≤—ã–≤–æ–¥–∞", g.selectOutputFile)
	selectLogConfigBtn := widget.NewButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ª–æ–≥–≥–µ—Ä–∞", g.selectLogConfig)
	analyzeBtn := widget.NewButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", g.runAnalysis)
	cancelBtn := widget.NewButton("–û—Ç–º–µ–Ω–∏—Ç—å", g.cancelAnalysis)

	pathContainer := container.NewBorder(nil, nil, widget.NewLabel("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:"), selectPathBtn, g.pathEntry)
	urlContainer := container.NewBorder(nil, nil, widget.NewLabel("GitHub URL:"), analyzeGitHubBtn, g.urlEntry)
	outputContainer := container.NewBorder(nil, nil, widget.NewLabel("–§–∞–π–ª –≤—ã–≤–æ–¥–∞:"), selectOutputBtn, g.outputEntry)
	logConfigContainer := container.NewBorder(nil, nil, widget.NewLabel("–ö–æ–Ω—Ñ–∏–≥ –ª–æ–≥–≥–µ—Ä–∞:"), selectLogConfigBtn, g.logConfigEntry)

	controlsContainer := container.NewVBox(
		pathContainer,
		urlContainer,
		outputContainer,
		logConfigContainer,
		container.NewHBox(analyzeBtn, cancelBtn),
		g.progressBar,
		g.statusLabel,
	)

	content := container.NewBorder(
		controlsContainer,
		nil,
		nil,
		nil,
		container.NewBorder(
			widget.NewLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:"),
			nil,
			nil,
			nil,
			g.resultText,
		),
	)

	g.mainWindow.SetContent(content)
}

func (g *LintVisionGUI) selectDirectory() {
	dialog.ShowFolderOpen(func(uri fyne.ListableURI, err error) {
		if err != nil {
			dialog.ShowError(err, g.mainWindow)
			return
		}
		if uri != nil {
			g.pathEntry.SetText(uri.Path())
		}
	}, g.mainWindow)
}

func (g *LintVisionGUI) selectOutputFile() {
	dialog.ShowFileSave(func(writer fyne.URIWriteCloser, err error) {
		if err != nil {
			dialog.ShowError(err, g.mainWindow)
			return
		}
		if writer != nil {
			g.outputEntry.SetText(writer.URI().Path())
			writer.Close()
		}
	}, g.mainWindow)
}

func (g *LintVisionGUI) selectLogConfig() {
	dialog.ShowFileOpen(func(reader fyne.URIReadCloser, err error) {
		if err != nil {
			dialog.ShowError(err, g.mainWindow)
			return
		}
		if reader != nil {
			g.logConfigEntry.SetText(reader.URI().Path())
			reader.Close()
		}
	}, g.mainWindow)
}

func (g *LintVisionGUI) runAnalysis() {
	if g.isAnalyzing {
		dialog.ShowError(fmt.Errorf("–ê–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."), g.mainWindow)
		return
	}

	g.resultText.SetText("")
	g.statusLabel.SetText("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É...")

	path := g.pathEntry.Text
	output := g.outputEntry.Text
	logConfig := g.logConfigEntry.Text

	if path == "" {
		dialog.ShowError(fmt.Errorf("–£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"), g.mainWindow)
		return
	}

	expandedPath, err := g.expandPath(path)
	if err != nil {
		dialog.ShowError(fmt.Errorf("–û—à–∏–±–∫–∞ –≤ –ø—É—Ç–∏: %v", err), g.mainWindow)
		return
	}

	g.isAnalyzing = true
	g.progressBar.Show()
	g.progressBar.SetValue(0.1)
	g.statusLabel.SetText("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞...")

	if logConfig != "" {
		if err := logging.LoadConfig(logConfig); err != nil {
			dialog.ShowError(fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –ª–æ–≥–≥–µ—Ä–∞: %v", err), g.mainWindow)
			g.progressBar.Hide()
			g.statusLabel.SetText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞")
			return
		}
	}

	g.progressBar.SetValue(0.3)
	g.statusLabel.SetText("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")

	ctx, cancel := context.WithCancel(context.Background())
	g.cancelFunc = cancel

	go func() {
		defer func() {
			g.isAnalyzing = false
			g.cancelFunc = nil
		}()

		g.progressBar.SetValue(0.5)
		g.statusLabel.SetText("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥...")

		select {
		case <-ctx.Done():
			return
		default:
		}

		result, err := stats.AnalyzeAndSave(expandedPath, output)
		if err != nil {
			g.progressBar.Hide()
			g.statusLabel.SetText("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
			dialog.ShowError(fmt.Errorf("–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: %v", err), g.mainWindow)
			return
		}

		select {
		case <-ctx.Done():
			return
		default:
		}

		g.progressBar.SetValue(1.0)
		g.statusLabel.SetText("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

		resultText := g.formatResults(result, output)
		g.resultText.SetText(resultText)

		g.progressBar.Hide()
	}()
}

func (g *LintVisionGUI) cancelAnalysis() {
	if g.isAnalyzing && g.cancelFunc != nil {
		g.cancelFunc()
		g.isAnalyzing = false
		g.progressBar.Hide()
		g.statusLabel.SetText("–ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω")
	}
}

func (g *LintVisionGUI) expandPath(path string) (string, error) {
	if strings.HasPrefix(path, "~/") {
		home, err := os.UserHomeDir()
		if err != nil {
			return "", err
		}
		path = filepath.Join(home, path[2:])
	}

	path = os.ExpandEnv(path)
	return path, nil
}

func (g *LintVisionGUI) formatResults(stats stats.ProjectStats, outputPath string) string {
	var result strings.Builder

	result.WriteString("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n")

	if outputPath != "" {
		result.WriteString(fmt.Sprintf("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: %s\n\n", outputPath))
	}

	result.WriteString("=== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===\n")
	result.WriteString(fmt.Sprintf("–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: %d\n", len(stats.Files)))
	result.WriteString(fmt.Sprintf("–°–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: %d\n", stats.HiddenFiles))
	result.WriteString(fmt.Sprintf("–°–∫—Ä—ã—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: %d\n", stats.HiddenDirs))
	result.WriteString(fmt.Sprintf("–ù–µ—Å–∫—Ä—ã—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: %d\n\n", stats.NonHiddenDirs))

	result.WriteString("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ===\n")
	for category, count := range stats.CategoryCounts {
		result.WriteString(fmt.Sprintf("%s: %d —Ñ–∞–π–ª–æ–≤\n", category, count))
	}
	result.WriteString("\n")

	if len(stats.Files) > 0 {
		result.WriteString("=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===\n")
		for _, file := range stats.Files {
			result.WriteString(fmt.Sprintf("üìÅ %s\n", filepath.Base(file.Path)))
			result.WriteString(fmt.Sprintf("   –¢–∏–ø: %s (%s)\n", file.Category, file.Ext))
			result.WriteString(fmt.Sprintf("   –°—Ç—Ä–æ–∫: %d (–∫–æ–¥: %d, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: %d, –ø—É—Å—Ç—ã–µ: %d)\n",
				file.LinesTotal, file.LinesCode, file.LinesComments, file.LinesBlank))
			result.WriteString("\n")
		}
	}

	return result.String()
}

func (g *LintVisionGUI) runGitHubAnalysis() {
	if g.isAnalyzing {
		dialog.ShowError(fmt.Errorf("–ê–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."), g.mainWindow)
		return
	}

	g.resultText.SetText("")
	g.statusLabel.SetText("–í–∞–ª–∏–¥–∞—Ü–∏—è GitHub URL...")

	url := g.urlEntry.Text
	output := g.outputEntry.Text
	logConfig := g.logConfigEntry.Text

	if url == "" {
		dialog.ShowError(fmt.Errorf("—É–∫–∞–∂–∏—Ç–µ GitHub URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"), g.mainWindow)
		return
	}

	validationResult := parseurl.ValidateGitHubURL(url)
	if !validationResult.IsValid {
		var errorMsg strings.Builder
		errorMsg.WriteString(fmt.Sprintf("‚ùå %s\n\n", validationResult.Error))
		errorMsg.WriteString(fmt.Sprintf("URL: %s\n\n", url))

		if len(validationResult.Suggestions) > 0 {
			errorMsg.WriteString("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n")
			for i, suggestion := range validationResult.Suggestions {
				errorMsg.WriteString(fmt.Sprintf("%d. %s\n", i+1, suggestion))
			}
		}

		dialog.ShowError(fmt.Errorf("%s", errorMsg.String()), g.mainWindow)
		return
	}

	g.statusLabel.SetText("GitHub URL –≤–∞–ª–∏–¥–µ–Ω. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É...")

	g.isAnalyzing = true
	g.progressBar.Show()
	g.progressBar.SetValue(0.1)
	g.statusLabel.SetText("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞...")

	if logConfig != "" {
		if err := logging.LoadConfig(logConfig); err != nil {
			dialog.ShowError(fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –ª–æ–≥–≥–µ—Ä–∞: %v", err), g.mainWindow)
			g.progressBar.Hide()
			g.statusLabel.SetText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞")
			return
		}
	}

	g.progressBar.SetValue(0.2)
	g.statusLabel.SetText("–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")

	ctx, cancel := context.WithCancel(context.Background())
	g.cancelFunc = cancel

	go func() {
		defer func() {
			g.isAnalyzing = false
			g.cancelFunc = nil
		}()

		g.progressBar.SetValue(0.4)
		g.statusLabel.SetText("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")

		select {
		case <-ctx.Done():
			return
		default:
		}

		result, err := parseurl.AnalyzeRepoFromURL(url)
		if err != nil {
			g.progressBar.Hide()
			g.statusLabel.SetText("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")

			errorMsg := err.Error()
			if strings.Contains(errorMsg, "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω") {
				dialog.ShowError(fmt.Errorf("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\nURL: %s\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n‚Ä¢ –û–ø–µ—á–∞—Ç–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏\n‚Ä¢ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±—ã–ª —É–¥–∞–ª–µ–Ω", url), g.mainWindow)
			} else if strings.Contains(errorMsg, "–∑–∞–∫—Ä—ã—Ç—ã–π –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏") {
				dialog.ShowError(fmt.Errorf("üîí –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–∫—Ä—ã—Ç—ã–π!\n\nURL: %s\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", url), g.mainWindow)
			} else if strings.Contains(errorMsg, "–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞") {
				dialog.ShowError(fmt.Errorf("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é!\n\nURL: %s\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π\n‚Ä¢ –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\n‚Ä¢ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", url), g.mainWindow)
			} else if strings.Contains(errorMsg, "timed out") {
				dialog.ShowError(fmt.Errorf("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è!\n\nURL: %s\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n‚Ä¢ GitHub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n‚Ä¢ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π", url), g.mainWindow)
			} else {
				dialog.ShowError(fmt.Errorf("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!\n\nURL: %s\n\n–û—à–∏–±–∫–∞: %s", url, errorMsg), g.mainWindow)
			}
			return
		}

		select {
		case <-ctx.Done():
			return
		default:
		}

		g.progressBar.SetValue(0.8)
		g.statusLabel.SetText("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")

		if output != "" {
			if err := stats.SaveStats(result, output); err != nil {
				dialog.ShowError(fmt.Errorf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %v", err), g.mainWindow)
			}
		}

		select {
		case <-ctx.Done():
			return
		default:
		}

		g.progressBar.SetValue(1.0)
		g.statusLabel.SetText("–ê–Ω–∞–ª–∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

		resultText := g.formatResults(result, output)
		g.resultText.SetText(resultText)

		g.progressBar.Hide()
	}()
}

func (g *LintVisionGUI) Run() {
	g.mainWindow.ShowAndRun()
}
